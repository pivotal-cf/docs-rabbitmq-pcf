---
title: Migrating Metrics from VMware RabbitMQ for Tanzu Application Service v1.x to v2.0
owner: London Services
---

This topic tells you about the changes to metrics after upgrading from <%= vars.product_full %>
v1.x to v2.0 and how to migrate to the new metrics.

## <a id="about-metrics"></a> About Metrics in <%= vars.product_short %> v2.0

<%= vars.product_short %> v2.0 includes improvements to the metrics available in
RabbitMQ service instances.
This version unifies metrics provided by service instances with the metrics
provided by open-source RabbitMQ, and vastly increases the amount of information
available to you for observability, and takes advantage of
the more performance-optimised observability endpoint in RabbitMQ.

As a result of this refactor, the format of the metrics provided in v1.x of <%= vars.product_short %> has changed.
You might need to change any dashboards you used before upgrading.
In many cases, there are simply one-to-one mappings of old metric names to new metric names, however some
specific metrics might require some additional changes to achieve the same result.
Unless otherwise stated, all metrics are available from both the Loggregator Firehose
system and directly from the Prometheus endpoint on the RabbitMQ nodes themselves.

For the full list of exposed RabbitMQ and Erlang metrics, see the
[rabbitmq-server](https://github.com/rabbitmq/rabbitmq-server/blob/master/deps/rabbitmq_prometheus/metrics.md) in GitHub.

<p class="note">
  <strong>Note:</strong> The majority of these metrics are exposed by the
  <code>rabbitmq_prometheus</code> plug-in, and require you to have activated
  this plug-in on your service instance. The plug-in is always enabled for on-demand
  instances, however you can deactivate it for pre-provisioned instances.
  VMware recommends that you do not deactivate this plug-in.
</p>

## <a id="service-broker-on-demand"></a> On-Demand Service Broker Metrics

All metrics for the on-demand service broker have one-to-one equivalents in <%= vars.product_short %> v2.0,
and differ only in naming.

<table>
  <thead>
    <tr>
      <th>Old metric</th>
      <th>New metric</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>/on-demand-broker/p-rabbitmq/quota_remaining</code></td>
      <td><code>_on_demand_broker_p_rabbitmq_quota_remaining</code></td>
    </tr>
    <tr>
      <td><code>/on-demand-broker/p-rabbitmq/total_instances</code></td>
      <td><code>_on_demand_broker_p_rabbitmq_total_instances</code></td>
    </tr>
    <tr>
      <td><code>/on-demand-broker/p-rabbitmq/&lt;PLAN_NAME&gt;/quota_remaining</code></td>
      <td><code>_on_demand_broker_p_rabbitmq_&lt;PLAN_NAME&gt;_quota_remaining</code></td>
    </tr>
    <tr>
      <td><code>/on-demand-broker/p-rabbitmq/&lt;PLAN_NAME&gt;/quota_remaining</code></td>
      <td><code>_on_demand_broker_p_rabbitmq_&lt;PLAN_NAME&gt;_total_instances</code></td>
    </tr>
  </tbody>
</table>

## <a id="service-broker-prepro"></a> Pre-Provisioned Service Broker Metrics

All metrics for the pre-provisioned service broker have one-to-one equivalents in
<%= vars.product_short %> v2.0, and differ only in naming.

<table>
  <thead>
    <tr>
      <th>Old metric</th>
      <th>New metric</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>/p-rabbitmq/service_broker/heartbeat</code></td>
      <td><code>_p_rabbitmq_service_broker_heartbeat</code></td>
    </tr>
  </tbody>
</table>

## <a id="haproxy"></a> HAProxy Metrics (Pre-Provisioned Only)

All metrics for HAProxy have one-to-one equivalents in <%= vars.product_short %> v2.0,
and differ only in naming.

<table>
  <thead>
    <tr>
      <th>Old metric</th>
      <th>New metric</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>/p-rabbitmq/haproxy/heartbeat</code></td>
      <td><code>_p_rabbitmq_haproxy_heartbeat</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/haproxy/backend/qsize/amqp</code></td>
      <td><code>_p_rabbitmq_haproxy_backend_qsize_amqp</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/haproxy/backend/retries/amqp</code></td>
      <td><code>_p_rabbitmq_haproxy_backend_retries_amqp</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/haproxy/backend/ctime/amqp</code></td>
      <td><code>_p_rabbitmq_haproxy_backend_ctime_amqp</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/haproxy/health/connections</code></td>
      <td><code>_p_rabbitmq_haproxy_health_connections</code></td>
    </tr>
  </tbody>
</table>

## <a id="rabbitmq"></a> RabbitMQ Metrics

RabbitMQ metrics are now consumed directly from the Prometheus metrics endpoint of the RabbitMQ server, rather than
from the RabbitMQ Management API. In general, more information is now exposed in <%= vars.product_short %> than
before.

<table>
  <thead>
    <tr>
      <th>Old metric</th>
      <th>New metric</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>/p-rabbitmq/erlang/heartbeat</code></td>
      <td>No equivalent</td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/erlang/erlang_processes</code></td>
      <td><code>erlang_vm_process_count</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/erlang/reachable_nodes</code></td>
      <td><code>count(erlang_vm_dist_node_state, where value==3)</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/rabbitmq/system/memory</code></td>
      <td><code>rabbitmq_process_resident_memory_bytes</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/rabbitmq/system/mem_alarm</code></td>
      <td><code>rabbitmq_alarms_memory_used_watermark</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/rabbitmq/system/disk_free_alarm</code></td>
      <td><code>rabbitmq_alarms_free_disk_space_watermark</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/rabbitmq/system/disk_free</code></td>
      <td><code>rabbitmq_disk_space_available_bytes</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/rabbitmq/system/disk_free_limit</code></td>
      <td><code>rabbitmq_disk_space_available_limit_bytes</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/rabbitmq/system/file_descriptors</code></td>
      <td><code>rabbitmq_process_open_fds</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/rabbitmq/connections/count</code></td>
      <td><code>rabbitmq_connections</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/rabbitmq/consumers/count</code></td>
      <td><code>rabbitmq_global_consumers</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/rabbitmq/messages/published</code></td>
      <td><code>rabbitmq_global_messages_received_total</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/rabbitmq/messages/published_rate</code></td>
      <td><code>rate(rabbitmq_global_messages_received_total)</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/rabbitmq/messages/delivered</code></td>
      <td><code>rabbitmq_global_messages_delivered_consume_manual_ack_total</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/rabbitmq/messages/delivered_rate</code></td>
      <td><code>rate(rabbitmq_global_messages_delivered_consume_manual_ack_total)</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/rabbitmq/messages/delivered_noack</code></td>
      <td><code>rabbitmq_global_messages_delivered_consume_auto_ack_total</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/rabbitmq/messages/redelivered</code></td>
      <td><code>rabbitmq_global_messages_redelivered_total</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/rabbitmq/messages/redelivered_rate</code></td>
      <td><code>rate(rabbitmq_global_messages_redelivered_total)</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/rabbitmq/messages/get_no_ack</code></td>
      <td><code>rabbitmq_global_messages_delivered_get_auto_ack_total</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/rabbitmq/messages/get_no_ack_rate</code></td>
      <td><code>rate(rabbitmq_global_messages_delivered_get_auto_ack_total)</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/rabbitmq/messages/return_unroutable</code></td>
      <td><code>rabbitmq_global_messages_unroutable_returned_total</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/rabbitmq/messages/return_unroutable_rate</code></td>
      <td><code>rate(rabbitmq_global_messages_unroutable_returned_total)</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/rabbitmq/messages/pending</code></td>
      <td><code>rabbitmq_queue_messages_unacked</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/rabbitmq/messages/pending_acknowledgements</code></td>
      <td><code>rabbitmq_queue_messages_unacked</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/rabbitmq/queues/count</code></td>
      <td><code>rabbitmq_queues</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/rabbitmq/messages/available</code></td>
      <td><code>rabbitmq_queue_messages_ready</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/rabbitmq/channels/count</code></td>
      <td><code>rabbitmq_channels</code></td>
    </tr>
    <tr>
      <td><code>/p-rabbitmq/rabbitmq/messages/depth</code></td>
      <td><code>rabbitmq_queue_messages</code></td>
    </tr>
  </tbody>
</table>

### <a id="rabbitmq-detailed"></a> RabbitMQ Detailed Metrics

Some of the metrics from <%= vars.product_short %> v1.x are only
retrievable by using the `/metrics/detailed` endpoint on RabbitMQ servers.
For more information on this endpoint, see the
[rabbitmq-server](https://github.com/rabbitmq/rabbitmq-server/tree/master/deps/rabbitmq_prometheus#selective-querying-of-per-object-metrics) in GitHub.

In <%= vars.product_short %> v2.0.11 and later you can configure your service instances
to collect metrics from this endpoint.

If you want to collect the same metrics as in <%= vars.product_short %> v1.x,
do the following:

1. Set the detailed metrics endpoint to collect the relevant metrics:
    - **If you use a Prometheus server:** Ensure you are scraping the following endpoints on the RabbitMQ servers:
      - `/metrics`
      - `/metrics/detailed?family=vhost_status&family=exchange_names&family=queue_consumer_count&family=queue_coarse_metrics`
    - **If you are using the Loggregator Firehose system to collect metrics:** Configure
    additional metrics collection. You must set the value of `detailed_metrics_query` to
    `?family=vhost_status&family=exchange_names&family=queue_consumer_count&family=queue_coarse_metrics`<br>
    The procedure depends on the service offering you are using:
        - **For the on-demand offering:** You configure additional metrics when creating
        or updating a service instance.
        For more information, see [Collect Additional RabbitMQ Metrics in Loggregator (on-demand instances)](use.html#detailed-metrics).
        - **For the pre-provisioned offering:** You configure additional metrics in <%= vars.ops_manager %>.
        For more information, see [Collect Additional RabbitMQ Metrics in Loggregator (pre-provisioned instances)](install-config-pp.html#detailed-metrics).

1. Consult the following table for the equivalent metrics for this endpoint:
    <table>
      <thead>
        <tr>
          <th>Old metric</th>
          <th>New metric</th>
          <th>Endpoint exposed on</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><code>/p-rabbitmq/rabbitmq/vhosts/count</code></td>
          <td><code>count(rabbitmq_cluster_vhost_status)<br></code></td>
          <td><code>/metrics/detailed?family=vhost_status</code></td>
        </tr>
        <tr>
          <td><code>/p-rabbitmq/rabbitmq/exchanges/count</code></td>
          <td><code>count(rabbitmq_cluster_exchange_name)</code></td>
          <td><code>/metrics/detailed?family=exchange_names</code></td>
        </tr>
        <tr>
          <td><code>/p-rabbitmq/rabbitmq/exchange/&lt;VHOST_NAME&gt;/count</code></td>
          <td><code>count(rabbitmq_cluster_exchange_name, aggregate by vhost)</code></td>
          <td><code>/metrics/detailed?family=exchange_names</code></td>
        </tr>
        <tr>
          <td><code>/p-rabbitmq/rabbitmq/queues/&lt;VHOST_NAME&gt;/&lt;QUEUE_NAME&gt;/consumers</code></td>
          <td><code>rabbitmq_detailed_queue_consumers</code></td>
          <td><code>/metrics/detailed?family=queue_consumer_count</code></td>
        </tr>
        <tr>
          <td><code>/p-rabbitmq/rabbitmq/queues/&lt;VHOST_NAME&gt;/&lt;QUEUE_NAME&gt;/depth</code></td>
          <td><code>rabbitmq_detailed_queue_messages</code></td>
          <td><code>/metrics/detailed?family=queue_coarse_metrics</code></td>
        </tr>
      </tbody>
    </table>
